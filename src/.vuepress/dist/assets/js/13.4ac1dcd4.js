(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{366:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"jgsmart-demo-deployment-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jgsmart-demo-deployment-process"}},[e._v("#")]),e._v(" JGSmart Demo Deployment Process")]),e._v(" "),a("p",[e._v("This is a small guide covering the different steps that have to be followed to deploy and launch the Smart Demo. The demo is hosted on a virtual machine running Ubuntu.")]),e._v(" "),a("h2",{attrs:{id:"before-we-begin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before-we-begin"}},[e._v("#")]),e._v(" Before we begin")]),e._v(" "),a("p",[e._v("The deployment process relies heavily on the "),a("code",[e._v("screen")]),e._v(" command available on Linux. It is recommended to skim its "),a("a",{attrs:{href:"https://www.gnu.org/software/screen/manual/screen.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("documentation"),a("OutboundLink")],1),e._v(" to get the hang of it, especially the "),a("a",{attrs:{href:"https://www.gnu.org/software/screen/manual/screen.html#Invoking-Screen",target:"_blank",rel:"noopener noreferrer"}},[e._v("Invoking Screen"),a("OutboundLink")],1),e._v(" section.")]),e._v(" "),a("p",[e._v("Anyway, the main commands are:")]),e._v(" "),a("ol",[a("li",[e._v("Start and attach a new session with name [SESSION_NAME]"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("screen -S [SESSION_NAME]\n")])])])]),e._v(" "),a("li",[e._v("Dettach current session"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Ctrl+A+D\n")])])])]),e._v(" "),a("li",[e._v("List all sessions"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("screen -ls\n")])])])]),e._v(" "),a("li",[e._v("Reattach a dettached session"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("screen -r [SESSION_NAME]\n")])])])])]),e._v(" "),a("p",[e._v("A part from that, basic knowledge of Linux commands and Vim is recommended.")]),e._v(" "),a("h2",{attrs:{id:"connect-to-the-virtual-machine-via-ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-the-virtual-machine-via-ssh"}},[e._v("#")]),e._v(" Connect to the Virtual Machine via SSH")]),e._v(" "),a("p",[e._v("Open a new terminal and connect via SSH to the Virtual Machine where the demo code is hosted.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ssh user@jgsmart.jgingenieros.es\n")])])]),a("p",[e._v("Password: "),a("code",[e._v("123JGSmart456")])]),e._v(" "),a("h2",{attrs:{id:"start-docker-containers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-docker-containers"}},[e._v("#")]),e._v(" Start Docker Containers")]),e._v(" "),a("p",[e._v("Once inside the Virtual Machine the first step is to start the required containers. To do so run the next commands")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S docker\n$ cd ~/dev/dev-env/docker-env\n$ sudo docker-compose -f docker-compose.yaml -p jgsmart up --remove-orphans\n")])])]),a("p",[e._v("If there is any error, kill the process and try running the "),a("code",[e._v("docker-compose")]),e._v(" command again. This should spin up 4 containers, one running NATS and 3 running Mongo. If everything goes ok press "),a("code",[e._v("Ctrl+A+D")]),e._v(" to dettach the terminal session and go back to the main terminal session.")]),e._v(" "),a("h2",{attrs:{id:"start-solution-apis-and-integrators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-solution-apis-and-integrators"}},[e._v("#")]),e._v(" Start solution APIs and Integrators")]),e._v(" "),a("p",[e._v("Once the containers are running it is time to run the different solutions. The solutions are located at "),a("code",[e._v("~/dev/@jgsmart")]),e._v(". For practicality reasons it is recomended to change directory to "),a("code",[e._v("@jgsmart")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ~/dev/@jgsmart\n")])])]),a("p",[e._v("From all the folders inside "),a("code",[e._v("@jgsmart")]),e._v(", which can be listed via "),a("code",[e._v("ls")]),e._v(", the solutions that have to be started are: "),a("code",[e._v("ako-iot")]),e._v(", "),a("code",[e._v("forge")]),e._v(", "),a("code",[e._v("google-calendar")]),e._v(", "),a("code",[e._v("jgpresence")]),e._v(", "),a("code",[e._v("manttest")]),e._v(" and "),a("code",[e._v("wibeee")]),e._v(".")]),e._v(" "),a("p",[a("strong",[e._v("For each of these solutions")]),e._v(" both the  "),a("code",[e._v("api")]),e._v(" and the "),a("code",[e._v("integrator")]),e._v(" projects have to be started. To do so, the generic procedure goes as follows. First "),a("code",[e._v("cd")]),e._v(" into the main solution folder")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd [SOLNAME]\n")])])]),a("p",[e._v("After that, start a new screen session for the api, "),a("code",[e._v("cd")]),e._v(" into the api folder and launch the process via "),a("code",[e._v("npm run start")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S [SOLNAME]-api\n$ cd api\n$ npm run start\n")])])]),a("p",[e._v("Exit the screen session with "),a("code",[e._v("Ctrl+A+D")]),e._v(" and start a new screen session for the integrator, "),a("code",[e._v("cd")]),e._v(" into the integrator folder and launch the process via "),a("code",[e._v("npm run start")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S [SOLNAME]-integrator\n$ cd integrator\n$ npm run start\n")])])]),a("p",[e._v("As an example, the process for launching the "),a("code",[e._v("ako-iot")]),e._v(" solution would be:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ako-iot\n$ screen -S ako-api\n$ cd api\n$ npm run start\n")])])]),a("p",[e._v("This will launch the api. After that we exit the session via "),a("code",[e._v("Ctrl+A+D")]),e._v(" and then:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S ako-integrator\n$ cd integrator\n$ npm run start\n")])])]),a("p",[e._v("This process should be repeated with the rest of solutions ("),a("code",[e._v("forge")]),e._v(", "),a("code",[e._v("google-calendar")]),e._v(", "),a("code",[e._v("jgpresence")]),e._v(", "),a("code",[e._v("manttest")]),e._v(" and "),a("code",[e._v("wibeee")]),e._v(").")]),e._v(" "),a("h2",{attrs:{id:"start-id-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-id-manager"}},[e._v("#")]),e._v(" Start ID Manager")]),e._v(" "),a("p",[e._v("After the individual solutions have been started it is time to start the ID manager. The process is similar to the one presented above for each of the solutions. In this case the "),a("code",[e._v("service")]),e._v(" and "),a("code",[e._v("api")]),e._v(" projects have to be started.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ~/dev/id-manager\n$ screen -S id-manager-service\n$ cd service\n$ npm run start\n")])])]),a("p",[a("code",[e._v("Ctrl+A+D")]),e._v(" to exit the screen session and then:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S id-manager-api\n$ cd api\n$ npm run start\n")])])]),a("p",[e._v("This is enough to start the ID manager.")]),e._v(" "),a("h2",{attrs:{id:"start-viewer-api-and-integrators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-viewer-api-and-integrators"}},[e._v("#")]),e._v(" Start Viewer API and Integrators")]),e._v(" "),a("p",[e._v("After the ID manager it is time to start the viewer api and the integrators that enable communication between the viewer and the individual solutions. We will first start the integrators and after that, the api.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ~/dev/@jgsmart/viewer\n")])])]),a("p",[e._v("Once inside the "),a("code",[e._v("viewer")]),e._v(" folder the projects that have to be started are: "),a("code",[e._v("ako-viewer-integrator")]),e._v(", "),a("code",[e._v("gcalendar-viewer-integrator")]),e._v(", "),a("code",[e._v("jgpresence-viewer-integrator")]),e._v(", "),a("code",[e._v("manttest-viewer-integrator")]),e._v(".")]),e._v(" "),a("p",[e._v("The procedure to follow for each of these integrators is:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S [SOLUTION_NAME]-v-integrator\n$ cd [SOLUTION_NAME]-viewer-integrator\n$ npm run start\n")])])]),a("p",[a("code",[e._v("Ctrl+A+D")]),e._v(" to exit the screen session and repeat until all the viewer-integrators are up and running. After the 4 integrators have been launched, start the api.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ screen -S viewer-api\n$ cd api\n$ npm run start\n")])])]),a("h2",{attrs:{id:"launch-web"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#launch-web"}},[e._v("#")]),e._v(" Launch web")]),e._v(" "),a("p",[e._v("Now that we have up and running:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ako-iot")]),e._v(", "),a("code",[e._v("forge")]),e._v(", "),a("code",[e._v("google-calendar")]),e._v(", "),a("code",[e._v("jgpresence")]),e._v(", "),a("code",[e._v("manttest")]),e._v(" and "),a("code",[e._v("wibeee")]),e._v(" apis and integrators")]),e._v(" "),a("li",[a("code",[e._v("id-manager")]),e._v(" api and service")]),e._v(" "),a("li",[a("code",[e._v("ako-viewer-integrator")]),e._v(", "),a("code",[e._v("gcalendar-viewer-integrator")]),e._v(", "),a("code",[e._v("jgpresence-viewer-integrator")]),e._v(", "),a("code",[e._v("manttest-viewer-integrator")]),e._v(" and the "),a("code",[e._v("viewer")]),e._v(" api")])]),e._v(" "),a("p",[e._v("it is time to launch the web. To do so,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd ~/dev/@jgsmart/jgsmart-web-demo\n$ screen -S web\n$ sudo npm run start\n")])])]),a("p",[e._v("After entering the password the command output should look something like:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("user@JGSMART:~/dev/@jgsmart/jgsmart-web-demo$ sudo npm run start\n[sudo] password for user:\n\n> jgsmart-web-demo@1.0.0 start /home/user/dev/@jgsmart/jgsmart-web-demo\n> cross-env NODE_ENV=production node server/index.js\n\n\n READY  Server listening on http://0.0.0.0:80\n")])])]),a("p",[e._v("If everything went ok, accessing "),a("a",{attrs:{href:"http://jgsmart.jgingenieros.es/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://jgsmart.jgingenieros.es/"),a("OutboundLink")],1),e._v(" with:")]),e._v(" "),a("ul",[a("li",[e._v("Username: jgallostraa")]),e._v(" "),a("li",[e._v("Password: test")])]),e._v(" "),a("p",[e._v("should let you log in into the platform, where everything should be working.")]),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("A list of the screen sessions used for this tutorial can be found below. Use it to check that no steps were skipped and that all required sessions are there.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("user@JGSMART:~/dev/id-manager$ screen -ls\nThere are screens on:\n        24070.id-manager-service        (30/11/20 12:12:11)     (Detached)\n        21002.gc-api    (30/11/20 11:11:39)     (Detached)\n        20958.gc-integrator     (30/11/20 11:11:23)     (Detached)\n        20635.web       (30/11/20 11:05:13)     (Detached)\n        20450.viewer-api        (30/11/20 11:00:33)     (Detached)\n        20390.manttest-v-integrator     (30/11/20 11:00:16)     (Detached)\n        20342.presence-v-integrator     (30/11/20 11:00:00)     (Detached)\n        20273.gcalendar-v-integrator    (30/11/20 10:59:40)     (Detached)\n        20228.ako-v-integrator  (30/11/20 10:59:27)     (Detached)\n        20102.id-manager-api    (30/11/20 10:58:18)     (Detached)\n        20042.wibeee-api        (30/11/20 10:57:28)     (Detached)\n        19994.wibeee-integrator (30/11/20 10:57:14)     (Detached)\n        19895.manttest-api      (30/11/20 10:56:13)     (Detached)\n        19832.manttest-integrator       (30/11/20 10:55:54)     (Detached)\n        19783.presence-api      (30/11/20 10:55:31)     (Detached)\n        19689.presence-integrator       (30/11/20 10:54:50)     (Detached)\n        19604.forge-api (30/11/20 10:54:22)     (Detached)\n        19560.forge-integrator  (30/11/20 10:54:12)     (Detached)\n        19502.ako-integrator    (30/11/20 10:53:21)     (Detached)\n        19419.ako-api   (30/11/20 10:52:27)     (Detached)\n        18318.docker    (30/11/20 10:47:33)     (Detached)\n21 Sockets in /run/screen/S-user.\n")])])]),a("h2",{attrs:{id:"troubleshooting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),a("p",[e._v("If everything seems to be working (indicators, plots, etc.) but nothing is highlighted in the viewer try to restart both the api and service of the ID manager.")])])}),[],!1,null,null,null);t.default=s.exports}}]);